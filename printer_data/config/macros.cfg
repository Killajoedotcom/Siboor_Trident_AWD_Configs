#####################################################################
#------------------- A better start_print macro --------------------#
#####################################################################

[gcode_macro PRINT_START]
gcode:
    # This part fetches data from your slicer, such as bed temp, extruder temp, chamber temp, and the size of your printer.
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}
    {% set target_chamber = params.CHAMBER|default("40")|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    _SET_MPC_MATERIAL MATERIAL={params.MATERIAL}                    # Define filament parameters from slicer

    SET_GCODE_OFFSET Z=0                                            # Set offset to 0

    # Homes the printer, sets absolute positioning, and updates the Stealthburner LEDs.
    STATUS_HOMING
    # Check homing status and home if needed
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                                                         # Full home if not already homed
    {% elif 'z' not in printer.toolhead.homed_axes %}
        G28 Z                                                       # Home Z if only Z is unhomed
    {% endif %}

    {% if not printer.motors_sync.applied %}
      SYNC_MOTORS                                                   # Sync Motors
    {% endif %}
                
    G90                                                             # Use absolute/relative coordinates
    M400                                                            # Wait for current moves to finish
    CLEAR_PAUSE                                                     # Clear any existing pause state

    # Uncomment for bed mesh (1 of 2)
    BED_MESH_CLEAR                                                  # Clears old saved bed mesh (if any)

    # Checks if the bed temp is higher than 90C - if so, then trigger a heat soak.
    {% if params.BED|int > 90 %}
        M117 Bed: {target_bed}C                                     # Display bed temperature
        STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
        M106 S255                                                   # Turns on the PT-fan
        # Conditional check for nevermore pin
        {% if printer["output_pin nevermore"] is defined %}
            SET_PIN PIN=nevermore VALUE=1  # Turns on the Nevermore
        {% endif %}
        G1 X{x_wait} Y{y_wait} Z15 F9000                          # Go to the center of the bed
        M190 S{target_bed}                                         # Sets the target temp for the bed
        M117 Heatsoak: {target_chamber}C                           # Display heatsoak info
        # Conditional check for chamber thermistor
        {% if printer["temperature_sensor chamber"] is defined %}
            TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for the chamber to reach the desired temp
        {% else %}
            G4 P900000                                             # Wait 15 minutes for heatsoak
        {% endif %}

    # If the bed temp is not over 90c, then handle soak based on material
    {% else %}
        M117 Bed: {target_bed}C                                    # Display bed temperature
        STATUS_HEATING                                            # Sets SB-leds to heating-mode
        G1 X{x_wait} Y{y_wait} Z15 F9000                         # Go to center of the bed
        M190 S{target_bed}                                        # Sets the target temp for the bed
        
        # Material-based soak times with variant handling
        {% set raw_material = params.MATERIAL|default("ABS")|string|upper %}
        
        # Extract base material type by handling variants
        {% set material = namespace(type="") %}
        {% if "ABS" in raw_material or "ASA" in raw_material %}
            {% set material.type = "ABS" %}
        {% elif "PLA" in raw_material %}
            {% set material.type = "PLA" %}
        {% elif "PETG" in raw_material %}
            {% set material.type = "PETG" %}
        {% elif "TPU" in raw_material or "TPE" in raw_material %}
            {% set material.type = "TPU" %}
        {% elif "PVA" in raw_material %}
            {% set material.type = "PVA" %}
        {% elif "HIPS" in raw_material %}
            {% set material.type = "HIPS" %}
        {% else %}
            {% set material.type = raw_material %}
        {% endif %}

        # Define soak times
        {% set soak_time = {
            "ABS": 240000,    # 4 minutes - Standard PLA soak time
            "PLA": 180000,    # 3 minutes - Standard PLA soak time
            "PETG": 240000,   # 4 minutes - PETG needs slightly longer to stabilize
            "TPU": 180000,    # 3 minutes - TPU/TPE materials
            "PVA": 180000,    # 3 minutes - Support material, similar to PLA
            "HIPS": 240000    # 4 minutes - When used as support/primary under 90C
        }[material.type]|default(300000) %}    # Default to 5 minutes if material not found
        
        M117 Soak: {soak_time/60000|int}min ({raw_material})      # Display soak time and material
        G4 P{soak_time}                                           # Execute soak timer
    {% endif %}

    # Conditional method for Z_TILT_ADJUST and QUAD_GANTRY_LEVEL
    {% if 'z_tilt' in printer %}
        {% if not printer.z_tilt.applied %}
            STATUS_LEVELING                                       # Sets SB-LEDs to leveling-mode
            M117 Z-tilt adjust                                    # Display Z-tilt adjustment
            Z_TILT_ADJUST                                         # Levels the buildplate via z_tilt_adjust
            G28 Z                                                 # Homes Z again after z_tilt_adjust
        {% endif %}
    {% elif 'quad_gantry_level' in printer %}
        {% if not printer.quad_gantry_level.applied %}
            #STATUS_LEVELING                                      # Sets SB-LEDs to leveling-mode
            M117 QGL                                             # Display QGL status
            QUAD_GANTRY_LEVEL                                    # Levels the gantry
            #STATUS_HOMING                                        # Sets SB-LEDs to homing-mode
            G28 Z                                                # Homes Z again after QGL
        {% endif %}
    {% endif %}

    # Heating the nozzle to 150C. This helps with getting a correct Z-home
    STATUS_HEATING                                              # Sets SB-LEDs to heating-mode
    M117 Hotend: 150C                                           # Display hotend temperature
    M109 S150                                                   # Heats the nozzle to 150C

    STATUS_CLEANING                                             # Sets SB-LEDs to cleaning-mode
    CLEAN_NOZZLE EXTRUDER={target_extruder}                    # Clean nozzle before printing

    STATUS_COOLING                                              # Sets SB-LEDs to cooling-mode
    M109 S150                                                   # Heats the nozzle to 150C

    STATUS_CALIBRATING_Z                                       # Sets SB-LEDs to z-calibration-mode

    SMART_PARK                                                  # Parks the toolhead near the beginning of the print

    # Uncomment for bed mesh (2 of 2)
    STATUS_MESHING                                             # Sets SB-LEDs to bed mesh-mode
    M117 Bed mesh                                              # Display bed mesh status
    BED_MESH_CALIBRATE ADAPTIVE=1                              # Starts bed mesh

    CARTOGRAPHER_TOUCH                                         # Calibrate z offset only with hot nozzle
    M400

    SMART_PARK                                                 # Parks the toolhead near the beginning of the print
  
    # Heats up the nozzle to target via data from the slicer
    M117 Hotend: {target_extruder}C                           # Display target hotend temperature
    STATUS_HEATING                                            # Sets SB-LEDs to heating-mode
    M107                                                      # Turns off part cooling fan
    M109 S{target_extruder}                                   # Heats the nozzle to printing temp
    
    # Gets ready to print by doing a purge line and updating the SB-LEDs
    M117 The purge...                                         # Display purge status
    STATUS_CLEANING                                          # Sets SB-LEDs to cleaning-mode
    LINE_PURGE                                               # KAMP line purge

    M117 Printer goes brrr                                   # Display print starting
    
    STATUS_PRINTING                                          # Sets SB-LEDs to printing-mode

#--------------------------------------------------------------------
[gcode_macro PRINT_END]
gcode:
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-20.0 F3600                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=fan0 SPEED=0
    SET_FAN_SPEED FAN=fan2 SPEED=0
    SET_FAN_SPEED FAN=fan3 SPEED=0

    
    BED_MESH_CLEAR

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0

[gcode_macro M106]
gcode:
    {% set fan = 'fan' + (params.P|int if params.P is defined else 0)|string %}
    {% set speed = (params.S|float / 255 if params.S is defined else 1.0) %}
    SET_FAN_SPEED FAN={fan} SPEED={speed}

[gcode_macro SYNC_MOTORS]
rename_existing: SYNC_MOTORS_BASE
gcode:
    {% set axes = params.AXES|default('default')|string|lower %}
    {% set retry_tolerance = params.RETRY_TOLERANCE|default('default')|string|lower %}
    {% set retries = params.THRESHOLD_RETRIES|default('default')|string|lower %}
    {% set force_run = params.FORCE_RUN|default(0)|int %}
    {% if not printer.motors_sync.applied or force_run %}
        {% if axes == 'default' %}
            {% set axes = printer.configfile.config.motors_sync.axes %}
        {% endif %}
        {% if retry_tolerance == 'default' %}
            {% if 'retry_tolerance' in printer.configfile.config.motors_sync %}
                {% set retry_tolerance = printer.configfile.config.motors_sync.retry_tolerance %}
            {% else %}
                {% set retry_tolerance = 0 %}
            {% endif %}
        {% endif %}
        {% if retries == 'default' %}
            {% if 'retries' in printer.configfile.config.motors_sync %}
                {% set retries = printer.configfile.config.motors_sync.retries %}
            {% else %}
                {% set retries = 0 %}
            {% endif %}
        {% endif %}
        SYNC_MOTORS_BASE AXES={axes} RETRY_TOLERANCE={retry_tolerance} RETRIES={retries}
    {% else %}
        M118 Motors sync already applied! If you want force sync, run with FORCE_RUN=1 argument
    {% endif %}

[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s-2} MAXIMUM={s+5}   # Wait for hotend temp (within n degrees)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s-2} MAXIMUM={s+5}  # Wait for bed temp (within n degrees)
    {% endif %}
   
#--------------------------------------------------------------------
    
[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 
  
#--------------------------------------------------------------------

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}
  
#--------------------------------------------------------------------

[gcode_macro CANCEL_PRINT]
# Defines a G-code macro to cancel the actual running print
description = Cancel the actual running print
rename_existing = CANCEL_PRINT_BASE
variable_park = True
gcode = 
    G28 Y                                     # Home Y axis
    _TOOLHEAD_PARK_PAUSE_CANCEL               # Call _TOOLHEAD_PARK_PAUSE_CANCEL macro
    TURN_OFF_HEATERS                          # Turn off all heaters
    CANCEL_PRINT_BASE                         # Call CANCEL_PRINT_BASE to cancel print
    SET_FAN_SPEED FAN=fan0 SPEED=0
    SET_FAN_SPEED FAN=fan2 SPEED=0
    SET_FAN_SPEED FAN=fan3 SPEED=0


####################################################################################
##                               Bed Leveling and Height Calibration Macro
####################################################################################
[gcode_macro G32]
# Defines a G-code macro for bed leveling and height calibration
gcode:
    BED_MESH_CLEAR               # Clear bed mesh
    G28                          # Home all axes
    Z_TILT_ADJUST                # Perform gantry leveling
    G28                          # Home all axes
    G0 X175 Y175 Z30 F3600       # Fast move to X150 Y150 Z30 at 3600 mm/min



####################################################################################
##                                    Z Tilt Adjustment
####################################################################################

[gcode_macro UNSAFE_LOWER_BED]
description: Lower the bed 10mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=0
  G0 Z10 F600
  M84

# [gcode_macro Z_TILT_ADJUST]                    # IDM/Cartographer optimized 3Z leveling macro
# rename_existing: _Z_TILT_ADJUST
# gcode:
#     SAVE_GCODE_STATE NAME=STATE_Z_TILT         # Save current state for Z tilt adjustment
#     BED_MESH_CLEAR                             # Clear bed mesh
#     {% if not printer.z_tilt.applied %}
#       _Z_TILT_ADJUST horizontal_move_z=10 retry_tolerance=1   # Adjust Z tilt with higher tolerance initially
#     {% endif %}
#     _Z_TILT_ADJUST horizontal_move_z=2          # Fine-tune Z tilt adjustment
#     RESTORE_GCODE_STATE NAME=STATE_Z_TILT       # Restore saved state after adjustment

####################################################################################
##                                    Filament
####################################################################################

[gcode_macro LOAD_FILAMENT]
variable_load_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=load_state
    G91
    G92 E0
    G1 E{load_distance} F{max_velocity} # fast-load
    G1 E{purge_distance} F{speed} # purge
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
variable_unload_distance:  50
variable_purge_distance:  25
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity  * 60 %}
    SAVE_GCODE_STATE NAME=unload_state
    G91
    G92 E0
    G1 E{purge_distance} F{speed} # purge
    G1 E-{unload_distance} F{max_velocity} # fast-unload
    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro _SET_MPC_MATERIAL]
description: Set heater MPC parameters for a given material
variable_filament_table:
    ## Update this table to adjust material settings
    {
        ## ( density, heat capacity )  # suggested heat capacity range
        "PLA"       : ( 1.25, 2.20 ),  # 1.80 - 2.20
        "PETG"      : ( 1.27, 2.20 ),  # 1.70 - 2.20
        "PC+ABS"    : ( 1.15, 2.20 ),  # 1.50 - 2.20
        "ABS"       : ( 1.06, 2.40 ),  # 1.25 - 2.40
        "ASA"       : ( 1.07, 2.10 ),  # 1.30 - 2.10
        "PA6"       : ( 1.12, 2.50 ),  # 2.00 - 2.50
        "PA"        : ( 1.15, 2.50 ),  # 2.00 - 2.50
        "PC"        : ( 1.20, 1.90 ),  # 1.10 - 1.90
        "TPU"       : ( 1.21, 2.00 ),  # 1.50 - 2.00
        "TPU-90A"   : ( 1.15, 2.00 ),  # 1.50 - 2.00
        "TPU-95A"   : ( 1.22, 2.00 ),  # 1.50 - 2.00
        "ABS-CF"    : ( 1.11, 2.40 ),  # 1.25 - 2.40
        "ASA-CF"    : ( 1.11, 2.10 ),  # 1.30 - 2.10
        "PA6-CF"    : ( 1.19, 2.50 ),  # 2.00 - 2.50
        "PC+ABS-CF" : ( 1.22, 2.20 ),  # 1.50 - 2.20
        "PC+CF"     : ( 1.36, 1.90 ),  # 1.10 - 1.90
        "PLA-CF"    : ( 1.29, 2.20 ),  # 1.80 - 2.20
        "PETG-CF"   : ( 1.30, 2.20 ),  # 1.70 - 2.20
    }
gcode:
    {% set material = params.MATERIAL | upper %}
    {% set heater = params.HEATER | default('extruder') %}
    {% set extruder_config = printer.configfile.settings[heater] %}

    {% if material in filament_table %}
        {% set (density, heat_capacity) = filament_table[material] %}

        RESPOND PREFIX=🔥 MSG="Configured {heater} MPC for {material}. Density: {density}, Heat Capacity: {heat_capacity}"
    {% else %}
        {% set density = extruder_config.filament_density %}
        {% set heat_capacity=extruder_config.filament_heat_capacity %}

        RESPOND PREFIX=🔥 MSG="Unknown material '{material}', using default mpc parameters for {heater}"
    {% endif %}

    MPC_SET HEATER={heater} FILAMENT_DENSITY={density} FILAMENT_HEAT_CAPACITY={heat_capacity}